import os
import boto3
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def format_gb(size_bytes):
    return size_bytes / (1024 ** 3)

def download_s3_folder(s3_client, bucket, s3_folder, local_folder):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å S3 —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ –æ–±—ä—ë–º—É"""
    local_path = Path(local_folder)
    local_path.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
    paginator = s3_client.get_paginator('list_objects_v2')
    pages = paginator.paginate(Bucket=bucket, Prefix=s3_folder)
    all_files = []
    total_bytes = 0
    for page in pages:
        if 'Contents' in page:
            for obj in page['Contents']:
                key = obj['Key']
                if key.endswith('/'):  # Skip directories
                    continue
                all_files.append((key, obj['Size']))
                total_bytes += obj['Size']
    logger.info(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {format_gb(total_bytes):.2f} –ì–ë")

    downloaded_bytes = 0

    for idx, (key, size) in enumerate(all_files, 1):
        relative_path = key.replace(s3_folder, '').lstrip('/')
        local_file_path = local_path / relative_path
        local_file_path.parent.mkdir(parents=True, exist_ok=True)

        logger.info(f"[{idx}/{len(all_files)}] Downloading {key} -> {local_file_path} ({size/1024/1024:.2f} MB)")
        s3_client.download_file(bucket, key, str(local_file_path))
        downloaded_bytes += size
        gb_left = format_gb(total_bytes - downloaded_bytes)
        print(f"\r–û—Å—Ç–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {gb_left:.2f} –ì–ë", end="", flush=True)

    print("\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ S3 –∫–ª–∏–µ–Ω—Ç–∞
    s3_client = boto3.client(
        's3',
        endpoint_url=os.getenv('S3_ENDPOINT_URL'),
        aws_access_key_id=os.getenv('AWS_ACCESS_KEY_ID'),
        aws_secret_access_key=os.getenv('AWS_SECRET_ACCESS_KEY'),
    )
    
    bucket = os.getenv('S3_BUCKET')
    
    # –°–∫–∞—á–∏–≤–∞–µ–º MinHash –∏–Ω–¥–µ–∫—Å
    logger.info("üì• Downloading MinHash index...")
    download_s3_folder(
        s3_client,
        bucket,
        os.getenv('S3_MINHASH_PATH'),
        'data/minhash_index'
    )
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Elasticsearch (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if os.getenv('S3_ELASTICSEARCH_PATH'):
        logger.info("üì• Downloading Elasticsearch data...")
        download_s3_folder(
            s3_client,
            bucket,
            os.getenv('S3_ELASTICSEARCH_PATH'),
            'data/elasticsearch_data'
        )
    
    logger.info("‚úÖ Download completed!")

if __name__ == '__main__':
    main()
